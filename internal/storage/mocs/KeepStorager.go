// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kTowkA/GophKeeper/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// KeepStorager is an autogenerated mock type for the KeepStorager type
type KeepStorager struct {
	mock.Mock
}

// Load provides a mock function with given fields: _a0, _a1
func (_m *KeepStorager) Load(_a0 context.Context, _a1 model.StorageLoadRequest) (model.StorageLoadResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 model.StorageLoadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.StorageLoadRequest) (model.StorageLoadResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.StorageLoadRequest) model.StorageLoadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.StorageLoadResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.StorageLoadRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *KeepStorager) Save(_a0 context.Context, _a1 model.StorageSaveRequest) (model.StorageSaveResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 model.StorageSaveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.StorageSaveRequest) (model.StorageSaveResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.StorageSaveRequest) model.StorageSaveResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.StorageSaveResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.StorageSaveRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeepStorager creates a new instance of KeepStorager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeepStorager(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeepStorager {
	mock := &KeepStorager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
